name: CMake

on: [push,pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      fail-fast: false
      matrix:
        #specific instruction sets and the fallthrough case (" ").
        instruction_set_flag: ["", "-DDISTOPIA_USE_SSE4_1=ON", "-DDISTOPIA_USE_AVX=ON", "-DDISTOPIA_USE_AVX2=ON"]
        os: [ubuntu-latest, macos-latest] # windows not supported yet by us
        include:
          - os: macos-latest
            cxx_compiler: "clang++"
            c_compiler: "clang"
            # to use clang-11
            # cxx_compiler: "$(brew --prefix llvm)/bin/clang++"
            # c_compiler: "$(brew --prefix llvm)/bin/clang"
          - os: ubuntu-latest
            # use gcc 9
            cxx_compiler: "g++-9"
            c_compiler: "gcc-9"
        exclude:
        # excludes AVX2 on macOS as the VM doesn't seem to support some AVX2 instructions.
          - os: macos-latest
            instruction_set_flag: "-DDISTOPIA_USE_AVX2=ON"


    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    #- name: Echo
      #run: $(brew --prefix llvm)/bin/clang -v &&  $(brew --prefix llvm)/bin/clang++ -v && which clang


    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE  -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ matrix.instruction_set_flag }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .  --config $BUILD_TYPE  

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
